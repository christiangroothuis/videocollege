import PropTypes from "prop-types";
import styled, { keyframes } from "styled-components";

interface SizeProps {
	size: number;
	sizeUnit: string;
}

interface ColorProps {
	color: string;
}

interface MotionProps extends SizeProps {
	x: number;
	y: number;
}

const motion = ({ x, y, size, sizeUnit }: MotionProps) => keyframes`
    0% {
        top: ${y}${sizeUnit};
        left: ${x}${sizeUnit};
    }
    50% {
        width: ${size / 4}${sizeUnit};
        height: ${size / 4}${sizeUnit};
        top: ${size / 2 - size / 8}${sizeUnit};
        left: ${size / 2 - size / 8}${sizeUnit};
    }
    100% {
        top: ${y}${sizeUnit};
        left: ${x}${sizeUnit};
    }
`;

interface GetBallsProps extends SizeProps, ColorProps {
	countBallsInLine: number;
}

const getBalls = ({
	countBallsInLine,
	color,
	size,
	sizeUnit,
}: GetBallsProps) => {
	const balls = [];
	let keyValue = 0;
	for (let i = 0; i < countBallsInLine; i++) {
		for (let j = 0; j < countBallsInLine; j++) {
			balls.push(
				<Ball
					color={color}
					size={size}
					x={i * (size / 3 + size / 12)}
					y={j * (size / 3 + size / 12)}
					key={keyValue.toString()}
					sizeUnit={sizeUnit}
				/>
			);
			keyValue++;
		}
	}
	return balls;
};

interface GridSpinnerProps {
	size: number;
	color: string;
	sizeUnit: string;
}

export const GridSpinner = ({ size, color, sizeUnit }: GridSpinnerProps) => {
	const countBallsInLine = 3;
	return (
		<Wrapper size={size} sizeUnit={sizeUnit}>
			{getBalls({ countBallsInLine, color, size, sizeUnit })}
		</Wrapper>
	);
};

const Wrapper = styled.div<SizeProps>`
	position: relative;
	display: flex;
	justify-content: center;
	align-items: center;
	width: ${({ size, sizeUnit }: SizeProps) => `${size}${sizeUnit}`};
	height: ${({ size, sizeUnit }: SizeProps) => `${size}${sizeUnit}`};
`;

const Ball = styled.div`
	position: absolute;
	top: ${({ y, sizeUnit }) => `${y}${sizeUnit}`};
	left: ${({ x, sizeUnit }) => `${x}${sizeUnit}`};
	width: ${({ size, sizeUnit }: SizeProps) => `${size / 6}${sizeUnit}`};
	height: ${({ size, sizeUnit }: SizeProps) => `${size / 6}${sizeUnit}`};
	border-radius: 50%;
	background-color: ${({ color }) => color};
	animation: ${motion} 1.5s cubic-bezier(0.23, 1, 0.32, 1) infinite;
`;

GridSpinner.defaultProps = {
	loading: true,
	size: 40,
	color: "#fff",
	sizeUnit: "px",
};

GridSpinner.propTypes = {
	loading: PropTypes.bool,
	size: PropTypes.number,
	color: PropTypes.string,
	sizeUnit: PropTypes.string,
};
